{"name": "test_del_prod", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5d2bea0aff83 <unknown>\n#1 0x5d2be9d68cf7 <unknown>\n#2 0x5d2be9db899e <unknown>\n#3 0x5d2be9db8aa1 <unknown>\n#4 0x5d2be9e03d64 <unknown>\n#5 0x5d2be9de20dd <unknown>\n#6 0x5d2be9e01006 <unknown>\n#7 0x5d2be9de1e53 <unknown>\n#8 0x5d2be9da9dd4 <unknown>\n#9 0x5d2be9dab1de <unknown>\n#10 0x5d2bea074531 <unknown>\n#11 0x5d2bea078455 <unknown>\n#12 0x5d2bea060f55 <unknown>\n#13 0x5d2bea0790ef <unknown>\n#14 0x5d2bea04499f <unknown>\n#15 0x5d2bea09d008 <unknown>\n#16 0x5d2bea09d1d7 <unknown>\n#17 0x5d2bea0af124 <unknown>\n#18 0x7b813be94ac3 <unknown>", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8544a2726e06165f94df375e898a8161\")>\n\n    @pytest.mark.usefixtures(\"browser\")\n    def test_del_prod(browser):\n        logger.info('====== Started: {} ======'.format(int(time.time())))\n        try:\n            logger.debug('Opening Admin Page')\n            admin_page = AdminPage(browser)\n    \n            logger.debug('Inputting admin name')\n>           admin_page.input_admin_name()\n\ntests/test_del_goods.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/admin_page.py:41: in input_admin_name\n    self.input_value(self.INPUT_NAME, self.ADMIN_NAME)\npage_objects/base_page.py:29: in input_value\n    self.get_element(locator).click()\npage_objects/base_page.py:19: in get_element\n    return WebDriverWait(self.browser, timeout).until(EC.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8544a2726e06165f94df375e898a8161\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7869126e9fc0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5d2bea0aff83 <unknown>\nE       #1 0x5d2be9d68cf7 <unknown>\nE       #2 0x5d2be9db899e <unknown>\nE       #3 0x5d2be9db8aa1 <unknown>\nE       #4 0x5d2be9e03d64 <unknown>\nE       #5 0x5d2be9de20dd <unknown>\nE       #6 0x5d2be9e01006 <unknown>\nE       #7 0x5d2be9de1e53 <unknown>\nE       #8 0x5d2be9da9dd4 <unknown>\nE       #9 0x5d2be9dab1de <unknown>\nE       #10 0x5d2bea074531 <unknown>\nE       #11 0x5d2bea078455 <unknown>\nE       #12 0x5d2bea060f55 <unknown>\nE       #13 0x5d2bea0790ef <unknown>\nE       #14 0x5d2bea04499f <unknown>\nE       #15 0x5d2bea09d008 <unknown>\nE       #16 0x5d2bea09d1d7 <unknown>\nE       #17 0x5d2bea0af124 <unknown>\nE       #18 0x7b813be94ac3 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "attachments": [{"name": "log", "source": "456e3dba-fafe-48d3-b09b-1467337e74f8-attachment.txt", "type": "text/plain"}], "start": 1722019374865, "stop": 1722019378018, "uuid": "c18f9102-70e8-4e59-a89e-a681ae6e49f1", "historyId": "21813d33a0e975a47724fa6b311678a1", "testCaseId": "21813d33a0e975a47724fa6b311678a1", "fullName": "tests.test_del_goods#test_del_prod", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('browser')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_del_goods"}, {"name": "host", "value": "we"}, {"name": "thread", "value": "11700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_del_goods"}]}