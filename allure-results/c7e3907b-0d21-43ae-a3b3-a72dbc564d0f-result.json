{"name": "test_main_page_currency", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5a1bca55a999c812058a7ca597e22119\")>\n\n    @pytest.mark.usefixtures(\"browser\")\n    def test_main_page_currency(browser):\n        logger.info('====== Started: {} ======'.format(int(time.time())))\n        try:\n            logger.debug('Getting list of currency switch options')\n            base_page = BasePage(browser)\n>           currency_switch_list = base_page.get_elements((By.CSS_SELECTOR, \"#form-currency > div > a\"))\n\ntests/test_curency_check.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/base_page.py:22: in get_elements\n    return WebDriverWait(self.browser, timeout).until(EC.visibility_of_all_elements_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5a1bca55a999c812058a7ca597e22119\")>\nmethod = <function visibility_of_all_elements_located.<locals>._predicate at 0x729bd8292830>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "attachments": [{"name": "log", "source": "c96137fd-4beb-4ca7-a617-8d65504d9bbc-attachment.txt", "type": "text/plain"}], "start": 1722156752462, "stop": 1722156756606, "uuid": "e2b1daa9-bacc-4909-9543-521325537b98", "historyId": "cf451c43a05239777799cba339c404fa", "testCaseId": "cf451c43a05239777799cba339c404fa", "fullName": "tests.test_curency_check#test_main_page_currency", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('browser')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_curency_check"}, {"name": "host", "value": "we"}, {"name": "thread", "value": "11322-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_curency_check"}]}